const fs = require("fs");
const path = require("path");
const { put } = require("@vercel/blob");
const { logEvent } = require("./logger"); // optional, for future use
const PDFDocument = require("pdfkit"); // assuming you're using pdfkit

/**
 * Generate a CarSaavy vehicle report (PDF + hosted link)
 * @param {Object} vehicleData - vehicle details from the VIN data fetch
 * @returns {Object} { pdfPath, hostedUrl }
 */
async function createReport(vehicleData) {
  try {
    const vin = vehicleData?.vin || "UNKNOWN_VIN";
    const fileName = `CarSaavy_Report_${vin}.pdf`;
    const filePath = `/tmp/${fileName}`;

    console.log(`üßæ [ReportGenerator] Generating PDF for VIN ${vin}`);

    // --- 1Ô∏è‚É£ Create the PDF document ---
    const doc = new PDFDocument();
    const stream = fs.createWriteStream(filePath);
    doc.pipe(stream);

    // --- 2Ô∏è‚É£ Add content ---
    doc.fontSize(20).text("CarSaavy Vehicle Report", { align: "center" });
    doc.moveDown();
    doc.fontSize(12).text(`VIN: ${vin}`);
    doc.moveDown();

    if (vehicleData.make || vehicleData.model) {
      doc.text(`Make: ${vehicleData.make || "N/A"}`);
      doc.text(`Model: ${vehicleData.model || "N/A"}`);
      doc.text(`Year: ${vehicleData.year || "N/A"}`);
      doc.moveDown();
    }

    if (vehicleData.features) {
      doc.text("Key Features:", { underline: true });
      vehicleData.features.forEach((f) => doc.text(`‚Ä¢ ${f}`));
      doc.moveDown();
    }

    if (vehicleData.marketValue) {
      doc.text(`Estimated Market Value: $${vehicleData.marketValue}`);
      doc.moveDown();
    }

    doc.text("Generated by CarSaavy ‚Äî empowering smarter car negotiations.", {
      align: "center",
      italic: true,
    });

    doc.end();
    await new Promise((resolve) => stream.on("finish", resolve));

    console.log(`‚úÖ [ReportGenerator] PDF generated: ${filePath}`);

    // --- 3Ô∏è‚É£ Upload to Vercel Blob Storage ---
    const blob = await put(fileName, fs.readFileSync(filePath), {
      access: "public",
    });

    console.log(`‚òÅÔ∏è [ReportGenerator] Uploaded report to ${blob.url}`);

    // --- 4Ô∏è‚É£ Return paths ---
    const result = {
      pdfPath: filePath,
      hostedUrl: blob.url,
    };

    await logEvent?.("report-generator", "Report created", { vin, blobUrl: blob.url });

    return result;
  } catch (error) {
    console.error("‚ùå [ReportGenerator] Error generating report:", error);
    await logEvent?.("report-generator", "Error", { error: error.message });
    throw error;
  }
}

module.exports = { createReport };